{"version":3,"sources":["dragonballs.jpg","components/picCards/picCards.js","components/Container/Container.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","PicCard","props","react_default","a","createElement","className","alt","name","src","image","onClick","clickPicture","id","Container","pictures","App","state","cards","clickedArray","topScore","score","message","shuffledArray","_this","shuffleArray","setState","includes","concat","picArray","i","length","randompic","Math","floor","random","_ref","_this2","this","dragonballs","components_Container_Container","map","picture","picCards","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"g8OAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,4RCWzBC,eARC,SAAAC,GAAK,OACnBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,+BAA+BC,IAAKL,EAAMM,KAAMC,IAAKP,EAAMQ,MAAOC,QAAS,kBAAMT,EAAMU,aAAaV,EAAMW,WCDhHC,SAFG,SAAAZ,GAAK,OAAIC,EAAAC,EAAAC,cAAA,OAAKC,UAAY,aAAcJ,EAAMa,mBCkFjDC,6MA3EbC,MAAQ,CACNC,QACAC,aAAc,GACdC,SAAU,EACVC,MAAO,EACPC,QAAS,MAEXV,aAAe,SAAAC,GAEb,IAAMU,EAAgBC,EAAKC,aAAaP,GACxCM,EAAKE,SAAS,CAACR,MAAOK,IAElBC,EAAKP,MAAME,aAAaQ,SAASd,GACnCW,EAAKE,SAAS,CAAEL,MAAO,EAAGF,aAAc,GAAIG,QAAS,kIAGrDE,EAAKE,SAAS,CACZP,aAAcK,EAAKP,MAAME,aAAaS,OAAO,CAACf,IAC9CQ,MAAOG,EAAKP,MAAMI,MAAQ,EAC1BC,QAAS,cAKTE,EAAKP,MAAMI,MAAQG,EAAKP,MAAMG,UAChCI,EAAKE,SAAS,CAAEN,SAAUI,EAAKP,MAAMI,QAGhB,KAAnBG,EAAKP,MAAMI,OACbG,EAAKE,SAAS,CACZP,aAAc,GACdC,SAAU,EACVC,MAAM,EACNC,QAAS,oEAIfG,aAAe,SAACI,GACZ,IAAK,IAAIC,EAAID,EAASE,OAAS,EAAGD,EAAI,EAAGA,IAAK,CAC1C,IAAME,EAAYC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADRM,EAEL,CAACP,EAASG,GAAYH,EAASC,IAAnED,EAASC,GAFgCM,EAAA,GAE5BP,EAASG,GAFmBI,EAAA,GAI9C,OAAOP,2EAEF,IAAAQ,EAAAC,KACP,OACEnC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UAChBH,EAAAC,EAAAC,cAAA,OAAKI,IAAK8B,IAAajC,UAAU,OAAOC,IAAI,SAE5CJ,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAAd,sCAEFH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,gBACZH,EAAAC,EAAAC,cAAA,sIAA6HF,EAAAC,EAAAC,cAAA,wBAC7HF,EAAAC,EAAAC,cAAA,KAAGC,UAAY,SAAQH,EAAAC,EAAAC,cAAA,wBAAgBiC,KAAKrB,MAAMI,MAA3B,iBAAgDiB,KAAKrB,MAAMG,WAClFjB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,WAAUH,EAAAC,EAAAC,cAAA,cAASiC,KAAKrB,MAAMK,WAE7CnB,EAAAC,EAAAC,cAACmC,EAAD,CACKzB,SACFuB,KAAKrB,MAAMC,MAAMuB,IAAI,SAAAC,GAAO,OAC3BvC,EAAAC,EAAAC,cAACsC,EAAD,CACE/B,aAAcyB,EAAKzB,aACnBC,GAAI6B,EAAQ7B,GACZ+B,IAAKF,EAAQ7B,GACbL,KAAMkC,EAAQlC,KACdE,MAAOgC,EAAQhC,oBAnEXmC,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjD,EAAAC,EAAAC,cAACgD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.5c14bc8a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/dragonballs.8cc2b04e.jpg\";","import React from \"react\";\r\nimport \"./picCard.css\";\r\n\r\nconst PicCard = props => (\r\n  <div className=\"card\">\r\n    <div className=\"img-container\">\r\n      <img className=\"img-thumbnail img-responsive\" alt={props.name} src={props.image} onClick={() => props.clickPicture(props.id)}/>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default PicCard;","import React from \"react\";\r\nimport \"./Container.css\";\r\n\r\nconst Container = props => <div className= {\"container\"}>{props.pictures}</div>;\r\n\r\nexport default Container;","import React, { Component } from 'react';\nimport dragonballs from './dragonballs.jpg';\nimport './App.css';\nimport PicCard from \"./components/picCards/picCards.js\";\nimport Container from \"./components/Container/Container.js\";\nimport cards from \"./cards.json\";\n\n\nclass App extends Component {\n  // Setting this.state.cards \n  state = {\n    cards,\n    clickedArray: [],\n    topScore: 0,\n    score: 0,\n    message: \"\"\n   };\n  clickPicture = id => {\n    // this randomly shows the cards\n    const shuffledArray = this.shuffleArray(cards);\n    this.setState({cards: shuffledArray});\n    // if user clicks an image that has already been clicked the score state is set to 0 and the clickeadArray is emptied\n    if (this.state.clickedArray.includes(id)) {\n      this.setState({ score: 0, clickedArray: [], message: \"Oh no you clicked a character more than once. You've been hit by a Kamahamaha Wave! Game Over!  To start over click an image!\" });\n    }\n    else {\n      this.setState({\n        clickedArray: this.state.clickedArray.concat([id]),\n        score: this.state.score + 1,\n        message: \"Correct!!\"\n      \n      });\n    }\n    // if the current score is greater than the the topscore it changes the topscore to the current score.\n    if (this.state.score > this.state.topScore) {\n      this.setState({ topScore: this.state.score });\n    }\n    // if you click all the images without a duplicate show Congratulations message and reset state values\n    if (this.state.score===12) {\n      this.setState({ \n        clickedArray: [],\n        topScore: 0,\n        score:0,\n        message: \"Congratulations! You Won! Click an image to have another go!\" });\n    }\n\n  }\n  shuffleArray = (picArray) => {\n      for (let i = picArray.length - 1; i > 0; i--) {\n          const randompic = Math.floor(Math.random() * (i + 1));\n          [picArray[i], picArray[randompic]] = [picArray[randompic], picArray[i]];\n      }\n      return picArray;\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"header\">\n          <img src={dragonballs} className=\"logo\" alt=\"logo\" />\n          \n          <h1 className=\"title\">Dragon Ball Clicky Picture Game!!</h1>\n        </header>\n        <h3 className=\"instructions\">\n          <strong>To start click any image. Each image clicked will earn you one point, but don't click on any, more than once or it's <i>Game Over!</i></strong> \n          <p className = \"score\"><strong>Score: {this.state.score} || TopScore: {this.state.topScore}</strong></p>\n          <p className=\"message\"><strong>{this.state.message}</strong></p>\n        </h3>\n        <Container\n             pictures=\n          {this.state.cards.map(picture => (\n            <PicCard\n              clickPicture={this.clickPicture}\n              id={picture.id}\n              key={picture.id} \n              name={picture.name}\n              image={picture.image}\n            />\n          ))}\n        />\n       \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}